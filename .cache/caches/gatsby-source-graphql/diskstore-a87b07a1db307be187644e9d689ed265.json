{"expireTime":9007200858551690000,"key":"gatsby-source-graphql-schema-SPACEX-spacex","val":"type Address {\n  address: String\n  city: String\n  state: String\n}\n\ntype Capsule {\n  id: ID\n  landings: Int\n  missions: [CapsuleMission]\n  original_launch: Date\n  reuse_count: Int\n  status: String\n  type: String\n  dragon: Dragon\n}\n\ntype CapsuleMission {\n  flight: Int\n  name: String\n}\n\ninput CapsulesFind {\n  id: ID\n  landings: Int\n  mission: String\n  original_launch: Date\n  reuse_count: Int\n  status: String\n  type: String\n}\n\n\"\"\"conflict action\"\"\"\nenum conflict_action {\n  \"\"\"ignore the insert on this row\"\"\"\n  ignore\n\n  \"\"\"update the row with the given values\"\"\"\n  update\n}\n\ntype Core {\n  asds_attempts: Int\n  asds_landings: Int\n  block: Int\n  id: ID\n  missions: [CapsuleMission]\n  original_launch: Date\n  reuse_count: Int\n  rtls_attempts: Int\n  rtls_landings: Int\n  status: String\n  water_landing: Boolean\n}\n\ntype CoreMission {\n  name: String\n  flight: Int\n}\n\ninput CoresFind {\n  asds_attempts: Int\n  asds_landings: Int\n  block: Int\n  id: String\n  missions: String\n  original_launch: Date\n  reuse_count: Int\n  rtls_attempts: Int\n  rtls_landings: Int\n  status: String\n  water_landing: Boolean\n}\n\nscalar Date\n\ntype Distance {\n  feet: Float\n  meters: Float\n}\n\ntype Dragon {\n  active: Boolean\n  crew_capacity: Int\n  description: String\n  diameter: Distance\n  dry_mass_kg: Int\n  dry_mass_lb: Int\n  first_flight: String\n  heat_shield: DragonHeatShield\n  height_w_trunk: Distance\n  id: ID\n  launch_payload_mass: Mass\n  launch_payload_vol: Volume\n  name: String\n  orbit_duration_yr: Int\n  pressurized_capsule: DragonPressurizedCapsule\n  return_payload_mass: Mass\n  return_payload_vol: Volume\n  sidewall_angle_deg: Float\n  thrusters: [DragonThrust]\n  trunk: DragonTrunk\n  type: String\n  wikipedia: String\n}\n\ntype DragonHeatShield {\n  dev_partner: String\n  material: String\n  size_meters: Float\n  temp_degrees: Int\n}\n\ntype DragonPressurizedCapsule {\n  payload_volume: Volume\n}\n\ntype DragonThrust {\n  amount: Int\n  fuel_1: String\n  fuel_2: String\n  pods: Int\n  thrust: Force\n  type: String\n}\n\ntype DragonTrunk {\n  cargo: DragonTrunkCargo\n  trunk_volume: Volume\n}\n\ntype DragonTrunkCargo {\n  solar_array: Int\n  unpressurized_cargo: Boolean\n}\n\ntype Force {\n  kN: Float\n  lbf: Float\n}\n\ntype HistoriesResult {\n  result: Result\n  data: [History]\n}\n\ntype History {\n  details: String\n  event_date_unix: Date\n  event_date_utc: Date\n  id: ID\n  links: Link\n  title: String\n  flight: Launch\n}\n\ninput HistoryFind {\n  end: Date\n  flight_number: Int\n  id: ID\n  start: Date\n}\n\ntype Info {\n  ceo: String\n  coo: String\n  cto_propulsion: String\n  cto: String\n  employees: Int\n  founded: Int\n  founder: String\n  headquarters: Address\n  launch_sites: Int\n  links: InfoLinks\n  name: String\n  summary: String\n  test_sites: Int\n  valuation: Float\n  vehicles: Int\n}\n\ntype InfoLinks {\n  elon_twitter: String\n  flickr: String\n  twitter: String\n  website: String\n}\n\ntype Landpad {\n  attempted_landings: String\n  details: String\n  full_name: String\n  id: ID\n  landing_type: String\n  location: Location\n  status: String\n  successful_landings: String\n  wikipedia: String\n}\n\ntype Launch {\n  details: String\n  id: ID\n  is_tentative: Boolean\n  launch_date_local: Date\n  launch_date_unix: Date\n  launch_date_utc: Date\n  launch_site: LaunchSite\n  launch_success: Boolean\n  launch_year: String\n  links: LaunchLinks\n  mission_id: [String]\n  mission_name: String\n  rocket: LaunchRocket\n  static_fire_date_unix: Date\n  static_fire_date_utc: Date\n  telemetry: LaunchTelemetry\n  tentative_max_precision: String\n  upcoming: Boolean\n  ships: [Ship]\n}\n\ntype LaunchesPastResult {\n  result: Result\n  data: [Launch]\n}\n\ninput LaunchFind {\n  apoapsis_km: Float\n  block: Int\n  cap_serial: String\n  capsule_reuse: String\n  core_flight: Int\n  core_reuse: String\n  core_serial: String\n  customer: String\n  eccentricity: Float\n  end: Date\n  epoch: Date\n  fairings_recovered: String\n  fairings_recovery_attempt: String\n  fairings_reuse: String\n  fairings_reused: String\n  fairings_ship: String\n  gridfins: String\n  id: ID\n  inclination_deg: Float\n  land_success: String\n  landing_intent: String\n  landing_type: String\n  landing_vehicle: String\n  launch_date_local: Date\n  launch_date_utc: Date\n  launch_success: String\n  launch_year: String\n  legs: String\n  lifespan_years: Float\n  longitude: Float\n  manufacturer: String\n  mean_motion: Float\n  mission_id: String\n  mission_name: String\n  nationality: String\n  norad_id: Int\n  orbit: String\n  payload_id: String\n  payload_type: String\n  periapsis_km: Float\n  period_min: Float\n  raan: Float\n  reference_system: String\n  regime: String\n  reused: String\n  rocket_id: String\n  rocket_name: String\n  rocket_type: String\n  second_stage_block: String\n  semi_major_axis_km: Float\n  ship: String\n  side_core1_reuse: String\n  side_core2_reuse: String\n  site_id: String\n  site_name_long: String\n  site_name: String\n  start: Date\n  tbd: String\n  tentative_max_precision: String\n  tentative: String\n}\n\ntype LaunchLinks {\n  article_link: String\n  flickr_images: [String]\n  mission_patch_small: String\n  mission_patch: String\n  presskit: String\n  reddit_campaign: String\n  reddit_launch: String\n  reddit_media: String\n  reddit_recovery: String\n  video_link: String\n  wikipedia: String\n}\n\ntype Launchpad {\n  attempted_launches: Int\n  details: String\n  id: ID\n  location: Location\n  name: String\n  status: String\n  successful_launches: Int\n  vehicles_launched: [Rocket]\n  wikipedia: String\n}\n\ntype LaunchRocket {\n  fairings: LaunchRocketFairings\n  first_stage: LaunchRocketFirstStage\n  rocket_name: String\n  rocket_type: String\n  rocket: Rocket\n  second_stage: LaunchRocketSecondStage\n}\n\ntype LaunchRocketFairings {\n  recovered: Boolean\n  recovery_attempt: Boolean\n  reused: Boolean\n  ship: String\n}\n\ntype LaunchRocketFirstStage {\n  cores: [LaunchRocketFirstStageCore]\n}\n\ntype LaunchRocketFirstStageCore {\n  block: Int\n  core: Core\n  flight: Int\n  gridfins: Boolean\n  land_success: Boolean\n  landing_intent: Boolean\n  landing_type: String\n  landing_vehicle: String\n  legs: Boolean\n  reused: Boolean\n}\n\ntype LaunchRocketSecondStage {\n  block: Int\n  payloads: [Payload]\n}\n\ntype LaunchSite {\n  site_id: String\n  site_name_long: String\n  site_name: String\n}\n\ntype LaunchTelemetry {\n  flight_club: String\n}\n\ntype Link {\n  article: String\n  reddit: String\n  wikipedia: String\n}\n\ntype Location {\n  latitude: Float\n  longitude: Float\n  name: String\n  region: String\n}\n\ntype Mass {\n  kg: Int\n  lb: Int\n}\n\ntype Mission {\n  description: String\n  id: ID\n  manufacturers: [String]\n  name: String\n  twitter: String\n  website: String\n  wikipedia: String\n  payloads: [Payload]\n}\n\ntype MissionResult {\n  result: Result\n  data: [Mission]\n}\n\ninput MissionsFind {\n  id: ID\n  manufacturer: String\n  name: String\n  payload_id: String\n}\n\ntype Mutation {\n  \"\"\"\n  delete data from the table: \"users\"\n  \"\"\"\n  delete_users(\n    \"\"\"filter the rows which have to be deleted\"\"\"\n    where: users_bool_exp!\n  ): users_mutation_response\n\n  \"\"\"\n  insert data into the table: \"users\"\n  \"\"\"\n  insert_users(\n    \"\"\"the rows to be inserted\"\"\"\n    objects: [users_insert_input!]!\n\n    \"\"\"on conflict condition\"\"\"\n    on_conflict: users_on_conflict\n  ): users_mutation_response\n\n  \"\"\"\n  update data of the table: \"users\"\n  \"\"\"\n  update_users(\n    \"\"\"sets the columns of the filtered rows to the given values\"\"\"\n    _set: users_set_input\n\n    \"\"\"filter the rows which have to be updated\"\"\"\n    where: users_bool_exp!\n  ): users_mutation_response\n}\n\nscalar ObjectID\n\n\"\"\"column ordering options\"\"\"\nenum order_by {\n  \"\"\"in the ascending order, nulls last\"\"\"\n  asc\n\n  \"\"\"in the ascending order, nulls first\"\"\"\n  asc_nulls_first\n\n  \"\"\"in the ascending order, nulls last\"\"\"\n  asc_nulls_last\n\n  \"\"\"in the descending order, nulls first\"\"\"\n  desc\n\n  \"\"\"in the descending order, nulls first\"\"\"\n  desc_nulls_first\n\n  \"\"\"in the descending order, nulls last\"\"\"\n  desc_nulls_last\n}\n\ntype Payload {\n  customers: [String]\n  id: ID\n  manufacturer: String\n  nationality: String\n  norad_id: [Int]\n  orbit_params: PayloadOrbitParams\n  orbit: String\n  payload_mass_kg: Float\n  payload_mass_lbs: Float\n  payload_type: String\n  reused: Boolean\n}\n\ntype PayloadOrbitParams {\n  apoapsis_km: Float\n  arg_of_pericenter: Float\n  eccentricity: Float\n  epoch: Date\n  inclination_deg: Float\n  lifespan_years: Float\n  longitude: Float\n  mean_anomaly: Float\n  mean_motion: Float\n  periapsis_km: Float\n  period_min: Float\n  raan: Float\n  reference_system: String\n  regime: String\n  semi_major_axis_km: Float\n}\n\ninput PayloadsFind {\n  apoapsis_km: Float\n  customer: String\n  eccentricity: Float\n  epoch: Date\n  inclination_deg: Float\n  lifespan_years: Float\n  longitude: Float\n  manufacturer: String\n  mean_motion: Float\n  nationality: String\n  norad_id: Int\n  orbit: String\n  payload_id: ID\n  payload_type: String\n  periapsis_km: Float\n  period_min: Float\n  raan: Float\n  reference_system: String\n  regime: String\n  reused: Boolean\n  semi_major_axis_km: Float\n}\n\ntype Query {\n  \"\"\"\n  fetch data from the table: \"users\"\n  \"\"\"\n  users(\n    \"\"\"distinct select on columns\"\"\"\n    distinct_on: [users_select_column!]\n\n    \"\"\"limit the nuber of rows returned\"\"\"\n    limit: Int\n\n    \"\"\"skip the first n rows. Use only with order_by\"\"\"\n    offset: Int\n\n    \"\"\"sort the rows by one or more columns\"\"\"\n    order_by: [users_order_by!]\n\n    \"\"\"filter the rows returned\"\"\"\n    where: users_bool_exp\n  ): [users!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"users\"\n  \"\"\"\n  users_aggregate(\n    \"\"\"distinct select on columns\"\"\"\n    distinct_on: [users_select_column!]\n\n    \"\"\"limit the nuber of rows returned\"\"\"\n    limit: Int\n\n    \"\"\"skip the first n rows. Use only with order_by\"\"\"\n    offset: Int\n\n    \"\"\"sort the rows by one or more columns\"\"\"\n    order_by: [users_order_by!]\n\n    \"\"\"filter the rows returned\"\"\"\n    where: users_bool_exp\n  ): users_aggregate!\n\n  \"\"\"fetch data from the table: \"users\" using primary key columns\"\"\"\n  users_by_pk(id: uuid!): users\n  capsules(find: CapsulesFind, limit: Int, offset: Int, order: String, sort: String): [Capsule]\n  capsulesPast(find: CapsulesFind, limit: Int, offset: Int, order: String, sort: String): [Capsule]\n  capsulesUpcoming(find: CapsulesFind, limit: Int, offset: Int, order: String, sort: String): [Capsule]\n  capsule(id: ID!): Capsule\n  company: Info\n  cores(find: CoresFind, limit: Int, offset: Int, order: String, sort: String): [Core]\n  coresPast(find: CoresFind, limit: Int, offset: Int, order: String, sort: String): [Core]\n  coresUpcoming(find: CoresFind, limit: Int, offset: Int, order: String, sort: String): [Core]\n  core(id: ID!): Core\n  dragons(limit: Int, offset: Int): [Dragon]\n  dragon(id: ID!): Dragon\n  histories(find: HistoryFind, limit: Int, offset: Int, order: String, sort: String): [History]\n  historiesResult(find: HistoryFind, limit: Int, offset: Int, order: String, sort: String): HistoriesResult\n  history(id: ID!): History\n  landpads(limit: Int, offset: Int): [Landpad]\n  landpad(id: ID!): Landpad\n  launches(find: LaunchFind, limit: Int, offset: Int, order: String, sort: String): [Launch]\n  launchesPast(find: LaunchFind, limit: Int, offset: Int, order: String, sort: String): [Launch]\n  launchesPastResult(find: LaunchFind, limit: Int, offset: Int, order: String, sort: String): LaunchesPastResult\n  launchesUpcoming(find: LaunchFind, limit: Int, offset: Int, order: String, sort: String): [Launch]\n  launch(id: ID!): Launch\n  launchLatest(offset: Int): Launch\n  launchNext(offset: Int): Launch\n  launchpads(limit: Int, offset: Int): [Launchpad]\n  launchpad(id: ID!): Launchpad\n  missions(find: MissionsFind, limit: Int, offset: Int): [Mission]\n  missionsResult(find: MissionsFind, limit: Int, offset: Int): MissionResult\n  mission(id: ID!): Mission\n  payloads(find: PayloadsFind, limit: Int, offset: Int, order: String, sort: String): [Payload]\n  payload(id: ID!): Payload\n  roadster: Roadster\n  rockets(limit: Int, offset: Int): [Rocket]\n  rocketsResult(limit: Int, offset: Int): RocketsResult\n  rocket(id: ID!): Rocket\n  ships(find: ShipsFind, limit: Int, offset: Int, order: String, sort: String): [Ship]\n  shipsResult(find: ShipsFind, limit: Int, offset: Int, order: String, sort: String): ShipsResult\n  ship(id: ID!): Ship\n}\n\ntype Result {\n  totalCount: Int\n}\n\ntype Roadster {\n  apoapsis_au: Float\n  details: String\n  earth_distance_km: Float\n  earth_distance_mi: Float\n  eccentricity: Float\n  epoch_jd: Float\n  inclination: Float\n  launch_date_unix: Date\n  launch_date_utc: Date\n  launch_mass_kg: Int\n  launch_mass_lbs: Int\n  longitude: Float\n  mars_distance_km: Float\n  mars_distance_mi: Float\n  name: String\n  norad_id: Int\n  orbit_type: Float\n  periapsis_arg: Float\n  periapsis_au: Float\n  period_days: Float\n  semi_major_axis_au: Float\n  speed_kph: Float\n  speed_mph: Float\n  wikipedia: String\n}\n\ntype Rocket {\n  active: Boolean\n  boosters: Int\n  company: String\n  cost_per_launch: Int\n  country: String\n  description: String\n  diameter: Distance\n  engines: RocketEngines\n  first_flight: Date\n  first_stage: RocketFirstStage\n  height: Distance\n  id: ID\n  landing_legs: RocketLandingLegs\n  mass: Mass\n  name: String\n  payload_weights: [RocketPayloadWeight]\n  second_stage: RocketSecondStage\n  stages: Int\n  success_rate_pct: Int\n  type: String\n  wikipedia: String\n}\n\ntype RocketEngines {\n  number: Int\n  type: String\n  version: String\n  layout: String\n  engine_loss_max: String\n  propellant_1: String\n  propellant_2: String\n  thrust_sea_level: Force\n  thrust_vacuum: Force\n  thrust_to_weight: Float\n}\n\ntype RocketFirstStage {\n  burn_time_sec: Int\n  engines: Int\n  fuel_amount_tons: Float\n  reusable: Boolean\n  thrust_sea_level: Force\n  thrust_vacuum: Force\n}\n\ntype RocketLandingLegs {\n  number: Int\n  material: String\n}\n\ntype RocketPayloadWeight {\n  id: String\n  kg: Int\n  lb: Int\n  name: String\n}\n\ntype RocketSecondStage {\n  burn_time_sec: Int\n  engines: Int\n  fuel_amount_tons: Float\n  payloads: RocketSecondStagePayloads\n  thrust: Force\n}\n\ntype RocketSecondStagePayloadCompositeFairing {\n  height: Distance\n  diameter: Distance\n}\n\ntype RocketSecondStagePayloads {\n  option_1: String\n  composite_fairing: RocketSecondStagePayloadCompositeFairing\n}\n\ntype RocketsResult {\n  result: Result\n  data: [Rocket]\n}\n\ntype Ship {\n  abs: Int\n  active: Boolean\n  attempted_landings: Int\n  class: Int\n  course_deg: Int\n  home_port: String\n  id: ID\n  image: String\n  imo: Int\n  missions: [ShipMission]\n  mmsi: Int\n  model: String\n  name: String\n  position: ShipLocation\n  roles: [String]\n  speed_kn: Float\n  status: String\n  successful_landings: Int\n  type: String\n  url: String\n  weight_kg: Int\n  weight_lbs: Int\n  year_built: Int\n}\n\ntype ShipLocation {\n  latitude: Float\n  longitude: Float\n}\n\ntype ShipMission {\n  flight: String\n  name: String\n}\n\ninput ShipsFind {\n  id: ID\n  name: String\n  model: String\n  type: String\n  role: String\n  active: Boolean\n  imo: Int\n  mmsi: Int\n  abs: Int\n  class: Int\n  weight_lbs: Int\n  weight_kg: Int\n  year_built: Int\n  home_port: String\n  status: String\n  speed_kn: Int\n  course_deg: Int\n  latitude: Float\n  longitude: Float\n  successful_landings: Int\n  attempted_landings: Int\n  mission: String\n}\n\ntype ShipsResult {\n  result: Result\n  data: [Ship]\n}\n\n\"\"\"\nexpression to compare columns of type String. All fields are combined with logical 'AND'.\n\"\"\"\ninput String_comparison_exp {\n  _eq: String\n  _gt: String\n  _gte: String\n  _ilike: String\n  _in: [String!]\n  _is_null: Boolean\n  _like: String\n  _lt: String\n  _lte: String\n  _neq: String\n  _nilike: String\n  _nin: [String!]\n  _nlike: String\n  _nsimilar: String\n  _similar: String\n}\n\ntype Subscription {\n  \"\"\"\n  fetch data from the table: \"users\"\n  \"\"\"\n  users(\n    \"\"\"distinct select on columns\"\"\"\n    distinct_on: [users_select_column!]\n\n    \"\"\"limit the nuber of rows returned\"\"\"\n    limit: Int\n\n    \"\"\"skip the first n rows. Use only with order_by\"\"\"\n    offset: Int\n\n    \"\"\"sort the rows by one or more columns\"\"\"\n    order_by: [users_order_by!]\n\n    \"\"\"filter the rows returned\"\"\"\n    where: users_bool_exp\n  ): [users!]!\n\n  \"\"\"\n  fetch aggregated fields from the table: \"users\"\n  \"\"\"\n  users_aggregate(\n    \"\"\"distinct select on columns\"\"\"\n    distinct_on: [users_select_column!]\n\n    \"\"\"limit the nuber of rows returned\"\"\"\n    limit: Int\n\n    \"\"\"skip the first n rows. Use only with order_by\"\"\"\n    offset: Int\n\n    \"\"\"sort the rows by one or more columns\"\"\"\n    order_by: [users_order_by!]\n\n    \"\"\"filter the rows returned\"\"\"\n    where: users_bool_exp\n  ): users_aggregate!\n\n  \"\"\"fetch data from the table: \"users\" using primary key columns\"\"\"\n  users_by_pk(id: uuid!): users\n}\n\nscalar timestamptz\n\n\"\"\"\nexpression to compare columns of type timestamptz. All fields are combined with logical 'AND'.\n\"\"\"\ninput timestamptz_comparison_exp {\n  _eq: timestamptz\n  _gt: timestamptz\n  _gte: timestamptz\n  _in: [timestamptz!]\n  _is_null: Boolean\n  _lt: timestamptz\n  _lte: timestamptz\n  _neq: timestamptz\n  _nin: [timestamptz!]\n}\n\n\"\"\"\ncolumns and relationships of \"users\"\n\"\"\"\ntype users {\n  id: uuid!\n  name: String\n  rocket: String\n  timestamp: timestamptz!\n  twitter: String\n}\n\n\"\"\"\naggregated selection of \"users\"\n\"\"\"\ntype users_aggregate {\n  aggregate: users_aggregate_fields\n  nodes: [users!]!\n}\n\n\"\"\"\naggregate fields of \"users\"\n\"\"\"\ntype users_aggregate_fields {\n  count(columns: [users_select_column!], distinct: Boolean): Int\n  max: users_max_fields\n  min: users_min_fields\n}\n\n\"\"\"\norder by aggregate values of table \"users\"\n\"\"\"\ninput users_aggregate_order_by {\n  count: order_by\n  max: users_max_order_by\n  min: users_min_order_by\n}\n\n\"\"\"\ninput type for inserting array relation for remote table \"users\"\n\"\"\"\ninput users_arr_rel_insert_input {\n  data: [users_insert_input!]!\n  on_conflict: users_on_conflict\n}\n\n\"\"\"\nBoolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'.\n\"\"\"\ninput users_bool_exp {\n  _and: [users_bool_exp]\n  _not: users_bool_exp\n  _or: [users_bool_exp]\n  id: uuid_comparison_exp\n  name: String_comparison_exp\n  rocket: String_comparison_exp\n  timestamp: timestamptz_comparison_exp\n  twitter: String_comparison_exp\n}\n\n\"\"\"\nunique or primary key constraints on table \"users\"\n\"\"\"\nenum users_constraint {\n  \"\"\"unique or primary key constraint\"\"\"\n  users_pkey\n}\n\n\"\"\"\ninput type for inserting data into table \"users\"\n\"\"\"\ninput users_insert_input {\n  id: uuid\n  name: String\n  rocket: String\n  timestamp: timestamptz\n  twitter: String\n}\n\n\"\"\"aggregate max on columns\"\"\"\ntype users_max_fields {\n  name: String\n  rocket: String\n  timestamp: timestamptz\n  twitter: String\n}\n\n\"\"\"\norder by max() on columns of table \"users\"\n\"\"\"\ninput users_max_order_by {\n  name: order_by\n  rocket: order_by\n  timestamp: order_by\n  twitter: order_by\n}\n\n\"\"\"aggregate min on columns\"\"\"\ntype users_min_fields {\n  name: String\n  rocket: String\n  timestamp: timestamptz\n  twitter: String\n}\n\n\"\"\"\norder by min() on columns of table \"users\"\n\"\"\"\ninput users_min_order_by {\n  name: order_by\n  rocket: order_by\n  timestamp: order_by\n  twitter: order_by\n}\n\n\"\"\"\nresponse of any mutation on the table \"users\"\n\"\"\"\ntype users_mutation_response {\n  \"\"\"number of affected rows by the mutation\"\"\"\n  affected_rows: Int!\n\n  \"\"\"data of the affected rows by the mutation\"\"\"\n  returning: [users!]!\n}\n\n\"\"\"\ninput type for inserting object relation for remote table \"users\"\n\"\"\"\ninput users_obj_rel_insert_input {\n  data: users_insert_input!\n  on_conflict: users_on_conflict\n}\n\n\"\"\"\non conflict condition type for table \"users\"\n\"\"\"\ninput users_on_conflict {\n  constraint: users_constraint!\n  update_columns: [users_update_column!]!\n}\n\n\"\"\"\nordering options when selecting data from \"users\"\n\"\"\"\ninput users_order_by {\n  id: order_by\n  name: order_by\n  rocket: order_by\n  timestamp: order_by\n  twitter: order_by\n}\n\n\"\"\"\nselect columns of table \"users\"\n\"\"\"\nenum users_select_column {\n  \"\"\"column name\"\"\"\n  id\n\n  \"\"\"column name\"\"\"\n  name\n\n  \"\"\"column name\"\"\"\n  rocket\n\n  \"\"\"column name\"\"\"\n  timestamp\n\n  \"\"\"column name\"\"\"\n  twitter\n}\n\n\"\"\"\ninput type for updating data in table \"users\"\n\"\"\"\ninput users_set_input {\n  id: uuid\n  name: String\n  rocket: String\n  timestamp: timestamptz\n  twitter: String\n}\n\n\"\"\"\nupdate columns of table \"users\"\n\"\"\"\nenum users_update_column {\n  \"\"\"column name\"\"\"\n  id\n\n  \"\"\"column name\"\"\"\n  name\n\n  \"\"\"column name\"\"\"\n  rocket\n\n  \"\"\"column name\"\"\"\n  timestamp\n\n  \"\"\"column name\"\"\"\n  twitter\n}\n\nscalar uuid\n\n\"\"\"\nexpression to compare columns of type uuid. All fields are combined with logical 'AND'.\n\"\"\"\ninput uuid_comparison_exp {\n  _eq: uuid\n  _gt: uuid\n  _gte: uuid\n  _in: [uuid!]\n  _is_null: Boolean\n  _lt: uuid\n  _lte: uuid\n  _neq: uuid\n  _nin: [uuid!]\n}\n\ntype Volume {\n  cubic_feet: Int\n  cubic_meters: Int\n}\n"}